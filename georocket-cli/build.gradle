apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'checkstyle'

mainClassName = 'io.georocket.GeoRocketCli'

repositories {
    jcenter()
    maven {
        url 'http://download.osgeo.org/webdav/geotools/'
    }
}

dependencies {
    compile project(':georocket-client-api')
    compile project(':georocket-common')

    compile 'commons-io:commons-io:2.6'
    compile 'de.undercouch:underline:1.0.0'
    compile 'net.time4j:time4j-core:4.33'
    compile 'org.apache.ant:ant:1.10.1'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'org.fusesource.jansi:jansi:1.17.1'
    compile 'org.jline:jline:3.9.0'
    compile 'org.pcollections:pcollections:2.1.3'
    compile 'org.yaml:snakeyaml:1.19'

    compile group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.25'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    // BEGIN WORKAROUND-VERTX-2562: REMOVE THIS ONCE
    // https://github.com/eclipse/vert.x/issues/2562 HAS BEEN RESOLVED
    compile 'org.javassist:javassist:3.23.1-GA'
    // END WORKAROUND-VERTX-2562

    testCompile 'com.github.tomakehurst:wiremock:2.12.0'
    testCompile "io.vertx:vertx-unit:$vertxVersion"
}

// customize start scripts
startScripts {
    // customize application name
    applicationName = 'georocket'
    
    // set GEOROCKET_CLI_HOME environment variable
    doLast {
        def windowsScriptFile = file(getWindowsScript())
        def unixScriptFile = file(getUnixScript())
        windowsScriptFile.text = windowsScriptFile.text
            .replaceFirst('set APP_HOME=.*', '$0\r\nset GEOROCKET_CLI_HOME=%APP_HOME%')
        unixScriptFile.text = unixScriptFile.text
            .replaceFirst('APP_HOME=.*', '$0\nexport GEOROCKET_CLI_HOME=\\$APP_HOME')
    }
}

distributions {
    main {
        contents {
            // include 'conf' directory in distribution
            from(projectDir) {
                include 'conf/**/*'
            }

            // include 'docs' in distribution
            from(tasks.getByPath(':docs:asciidoctor')) {
                into "docs"
                eachFile { f ->
                    f.path = f.path.replaceFirst(/html5\//, '')
                }
                includeEmptyDirs = false
            }
        }
    }
}

// do not upload ZIP and TAR distributions to Maven repo
configurations.archives.with {
    artifacts.removeAll { it.file =~ 'tar' }
    artifacts.removeAll { it.file =~ 'zip' }
}
