subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    
    plugins.withType(JavaPlugin) {
        version = '1.0.0-alpha.1'
        group = 'io.georocket'
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    
    ext {
        vertxVersion = '3.2.0'
    }
    
    plugins.withType(EclipsePlugin) {
        tasks.eclipse.doLast {
            File prefsFile = file("${project.projectDir}/.settings/org.eclipse.jdt.core.prefs")
            def text = prefsFile.exists() ? prefsFile.text : ""
            prefsFile.parentFile.mkdirs()
            prefsFile.withWriter { w ->
                w << text
                    .replaceAll('org.eclipse.jdt.core.formatter.indentation.size=[0-9]+',
                        'org.eclipse.jdt.core.formatter.indentation.size=2')
                    .replaceAll('org.eclipse.jdt.core.formatter.tabulation.char=[a-z]+',
                        'org.eclipse.jdt.core.formatter.tabulation.char=space')
                    .replaceAll('org.eclipse.jdt.core.formatter.tabulation.size=[0-9]+',
                        'org.eclipse.jdt.core.formatter.tabulation.size=2')
            }
            text = prefsFile.text
            if (!text.contains('org.eclipse.jdt.core.formatter.indentation.size')) {
                prefsFile.append('org.eclipse.jdt.core.formatter.indentation.size=2\n')
            }
            if (!text.contains('org.eclipse.jdt.core.formatter.tabulation.char')) {
                prefsFile.append('org.eclipse.jdt.core.formatter.tabulation.char=space\n')
            }
            if (!text.contains('org.eclipse.jdt.core.formatter.tabulation.size')) {
                prefsFile.append('org.eclipse.jdt.core.formatter.tabulation.size=2\n')
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}
